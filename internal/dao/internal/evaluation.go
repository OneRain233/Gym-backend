// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EvaluationDao is the data access object for table evaluation.
type EvaluationDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns EvaluationColumns // columns contains all the column names of Table for convenient usage.
}

// EvaluationColumns defines and stores column names for table evaluation.
type EvaluationColumns struct {
	ID          string // ID
	USERID      string // User id
	FACILITYID  string // Facility Id
	SCORE       string // Score
	DESCRIPTION string // Description
	ANONYMOUS   string // IS Anonymous
	IMAGES      string // Image urls
	VIDEOS      string // Videos urls
}

// evaluationColumns holds the columns for table evaluation.
var evaluationColumns = EvaluationColumns{
	ID:          "ID",
	USERID:      "USER_ID",
	FACILITYID:  "FACILITY_ID",
	SCORE:       "SCORE",
	DESCRIPTION: "DESCRIPTION",
	ANONYMOUS:   "ANONYMOUS",
	IMAGES:      "IMAGES",
	VIDEOS:      "VIDEOS",
}

// NewEvaluationDao creates and returns a new DAO object for table data access.
func NewEvaluationDao() *EvaluationDao {
	return &EvaluationDao{
		group:   "default",
		table:   "evaluation",
		columns: evaluationColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EvaluationDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EvaluationDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EvaluationDao) Columns() EvaluationColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EvaluationDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EvaluationDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EvaluationDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
