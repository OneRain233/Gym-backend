// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TopicCommentDao is the data access object for table topic_comment.
type TopicCommentDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns TopicCommentColumns // columns contains all the column names of Table for convenient usage.
}

// TopicCommentColumns defines and stores column names for table topic_comment.
type TopicCommentColumns struct {
	ID              string // ID
	USERID          string // USER_ID
	TOPICID         string // TOPIC_ID
	PARENTCOMMENTID string // Parent comment ID
	TITLE           string // Comment_title
	CONTENT         string // Comment_conrtent
	APPROVE         string // comment_approve
	DISAPPROVE      string // comment_disapprove
	UPDATETIME      string // creat_time
	IMAGES          string // Image urls
}

// topicCommentColumns holds the columns for table topic_comment.
var topicCommentColumns = TopicCommentColumns{
	ID:              "ID",
	USERID:          "USER_ID",
	TOPICID:         "TOPIC_ID",
	PARENTCOMMENTID: "PARENT_COMMENT_ID",
	TITLE:           "TITLE",
	CONTENT:         "CONTENT",
	APPROVE:         "APPROVE",
	DISAPPROVE:      "DISAPPROVE",
	UPDATETIME:      "UPDATE_TIME",
	IMAGES:          "IMAGES",
}

// NewTopicCommentDao creates and returns a new DAO object for table data access.
func NewTopicCommentDao() *TopicCommentDao {
	return &TopicCommentDao{
		group:   "default",
		table:   "topic_comment",
		columns: topicCommentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TopicCommentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TopicCommentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TopicCommentDao) Columns() TopicCommentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TopicCommentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TopicCommentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TopicCommentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
